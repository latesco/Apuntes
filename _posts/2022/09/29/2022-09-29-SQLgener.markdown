---
layout: post
title:  "SQL y generadores: extrayendo información de un archivo"
date:   2022-09-29 01:55:51 -0400

---


## <i>Python, duckdb, generadores, Sqlite</i>

La herramiente de procesamiento y analisis de datos más utilizada en <i>Python</i> es <i>Pandas</i>, sin duda, ya que tiene muchos recursos. Sin embargo, en ocasiones el uso de <i>SQL</i> puede resultar conveniente también, o la combinación de ambas herramientas; de hecho <i>Pandas</i> tiene un método para conexiones a bases de datos <i>SQL</i>. 

El caso es que muchas o casi todas las operaciones que se realizan en paquetes como <i>Pandas</i>, son posibles en <i>SQL</i>, y hacer esto no requiere importar los datos a <i>RAM</i>; además, en casos como <i>SQLite</i> o <i>duckdb</i>, ni siquiera es necesario tener un servidor <i>SQL</i>.

### Duckdb

Este paquete permite ejecutar <i>queries</i> directamente sobre un archivo cualquiera: .csv, .txt, .parquet y otros.


```python
import duckdb
import os
import sys
```


```python
duckdb.sql('SELECT * FROM "./data/OnlineRetail.csv" LIMIT 5')
```




    ┌───────────┬───────────┬──────────────────────┬──────────┬──────────────────┬───────────┬────────────┬────────────────┐
    │ InvoiceNo │ StockCode │     Description      │ Quantity │   InvoiceDate    │ UnitPrice │ CustomerID │    Country     │
    │  varchar  │  varchar  │       varchar        │  int64   │     varchar      │  varchar  │   int64    │    varchar     │
    ├───────────┼───────────┼──────────────────────┼──────────┼──────────────────┼───────────┼────────────┼────────────────┤
    │ 536365    │ 85123A    │ WHITE HANGING HEAR…  │        6 │ 01/12/2010 08:26 │ 2,55      │      17850 │ United Kingdom │
    │ 536365    │ 71053     │ WHITE METAL LANTERN  │        6 │ 01/12/2010 08:26 │ 3,39      │      17850 │ United Kingdom │
    │ 536365    │ 84406B    │ CREAM CUPID HEARTS…  │        8 │ 01/12/2010 08:26 │ 2,75      │      17850 │ United Kingdom │
    │ 536365    │ 84029G    │ KNITTED UNION FLAG…  │        6 │ 01/12/2010 08:26 │ 3,39      │      17850 │ United Kingdom │
    │ 536365    │ 84029E    │ RED WOOLLY HOTTIE …  │        6 │ 01/12/2010 08:26 │ 3,39      │      17850 │ United Kingdom │
    └───────────┴───────────┴──────────────────────┴──────────┴──────────────────┴───────────┴────────────┴────────────────┘



La columna <i>UnitPrice</i>, no fue reconocida como número debido a la separación de decimales por comas; esto acarrea un paso extra para hacer consultas usando esa columna: hacer conversión a número. 

Por ejemplo, si agrupamos por la columna <i>'Country'</i>:


```python
duckdb.sql("""SELECT Country, SUM(CAST(REPLACE(UnitPrice,  ',', '.') AS NUMERIC) * Quantity) AS ingresos,
            SUM(Quantity) AS Cantidad
            FROM "./data/OnlineRetail.csv"
            GROUP BY Country
            LIMIT 5
            """
          )
```




    ┌────────────────┬───────────────┬──────────┐
    │    Country     │   ingresos    │ Cantidad │
    │    varchar     │ decimal(38,3) │  int128  │
    ├────────────────┼───────────────┼──────────┤
    │ United Kingdom │   8187806.364 │  4263829 │
    │ France         │    197403.900 │   110480 │
    │ Australia      │    137077.270 │    83653 │
    │ Netherlands    │    284661.540 │   200128 │
    │ Germany        │    221698.210 │   117448 │
    └────────────────┴───────────────┴──────────┘



Podemos asignar el resultado de la <i>query</i> a un objeto de nombre 'datos'.


```python
datos = duckdb.sql("""
                   SELECT Country,
                   
                   SUM(CAST(REPLACE(UnitPrice,  ',', '.') AS NUMERIC) * Quantity) AS ingresos,
                   
                   SUM(Quantity) AS Cantidad
                   
                   FROM "./data/OnlineRetail.csv"
                   
                   GROUP BY Country
            
            """
          )
```

Este objeto 'datos', ahora tiene varios atributos que pueden facilitar varias cosas; entre ellas convertir el resultado de la consulta o <i>query</i> en un <i>dataframe</i> de <i>Pandas</i>


```python
datos.df().head()
```




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Country</th>
      <th>ingresos</th>
      <th>Cantidad</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>United Kingdom</td>
      <td>8187806.364</td>
      <td>4263829.0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>France</td>
      <td>197403.900</td>
      <td>110480.0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>Australia</td>
      <td>137077.270</td>
      <td>83653.0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>Netherlands</td>
      <td>284661.540</td>
      <td>200128.0</td>
    </tr>
    <tr>
      <th>4</th>
      <td>Germany</td>
      <td>221698.210</td>
      <td>117448.0</td>
    </tr>
  </tbody>
</table>
</div>



La columna <i>'InvoiceDate'</i>, no aparece como tipo fecha sino <i>varchar</i>; para consultas que involucren esa columna sería necesaria una conversión.

Por ejemplo, en este caso, la fecha es un <i>timestamp</i>, pero el formato no es el requerido por el algoritmo: YYYY-MM-DD HH\:MM\:SS. Se puede trabajar sobre esa columna transformandola a formato fecha. 


```python
duckdb.sql("""SELECT CAST(CONCAT(SUBSTRING(InvoiceDate, 7, 4), '-', 

              SUBSTRING(InvoiceDate, 4, 2),
              '-',
              SUBSTRING(InvoiceDate, 1, 2),
              ' ',
              CONCAT(SUBSTRING(InvoiceDate, 12, 5), ':00')
              
              ) AS DATETIME) AS Fecha
              
            FROM "./data/OnlineRetail.csv"
            
            LIMIT 10
            
            """)
```




    ┌─────────────────────┐
    │        Fecha        │
    │      timestamp      │
    ├─────────────────────┤
    │ 2010-12-01 08:26:00 │
    │ 2010-12-01 08:26:00 │
    │ 2010-12-01 08:26:00 │
    │ 2010-12-01 08:26:00 │
    │ 2010-12-01 08:26:00 │
    │ 2010-12-01 08:26:00 │
    │ 2010-12-01 08:26:00 │
    │ 2010-12-01 08:28:00 │
    │ 2010-12-01 08:28:00 │
    │ 2010-12-01 08:34:00 │
    ├─────────────────────┤
    │       10 rows       │
    └─────────────────────┘



### Generadores

Un generador, es una función que se comporta a la manera de un objeto sobre el cual es posible hacer iteraciones. En el caso particular de un archivo de datos, tiene una conexion con la ruta del archivo, entregando un solo resultado a la vez; con la ayuda de un <i>bucle</i> podrán hacerse calculos sobre filas o columnas.

Con el código de en la celda inferior, creamos un generador. Es la misma sintaxis de una <i>list comprehension</i>, solo que encapsulada en parentesis, en lugar de corchetes.

El <i>encoding</i>, es necesario debido a que el formato del archivo separa las columnas con ';' en vez de ','.


```python
genr = (fila for fila in open('./data/OnlineRetail.csv',
                              encoding = 'ISO-8859-1'))
```

Para extraer el encabezado de las columnas, hacemos:


```python
genr = (s.rstrip().split(';') for s in genr)
cols = next(genr)

cols
```




    ['InvoiceNo',
     'StockCode',
     'Description',
     'Quantity',
     'InvoiceDate',
     'UnitPrice',
     'CustomerID',
     'Country']



Los valores de la primera fila se extraen de este modo:


```python
dct = (dict(zip(cols, d)) for d in genr)

next(dct)
```




    {'InvoiceNo': '536365',
     'StockCode': '85123A',
     'Description': 'WHITE HANGING HEART T-LIGHT HOLDER',
     'Quantity': '6',
     'InvoiceDate': '01/12/2010 08:26',
     'UnitPrice': '2,55',
     'CustomerID': '17850',
     'Country': 'United Kingdom'}



Los generadores producen objetos que  solo permiten lecturas de modo progresivo; es decir, una vez que lees una fila, ya solo te entregará la siguiente. De lo contrario debes repetir el proceso.


```python
genr = (fila for fila in open('./data/OnlineRetail.csv', encoding = 'ISO-8859-1'))
genr = (s.rstrip().split(';') for s in genr)
cols = next(genr)
dct = (dict(zip(cols, d)) for d in genr)
```

El total de mercancias vendidas en el Reino Unido, según esta tabla.


```python
q = (int(d['Quantity'])  for d in dct if d['Country'] == 'United Kingdom')

sum(q)
```




    4263829



Para obtener el total de ventas, por ejemplo:


```python
genr = (fila for fila in open('./data/OnlineRetail.csv', encoding = 'ISO-8859-1'))
genr = (s.rstrip().split(';') for s in genr)
cols = next(genr)
dct = (dict(zip(cols, d)) for d in genr)


Ventas = (int(d['Quantity']) * float(d['UnitPrice'].replace(',', '.')) for d in dct)

sum(Ventas)
```




    9747747.93400317



El procedimiento es eficaz, aunque no necesarimente cómodo.

### SQLite

Con <i>sqlite</i> puede crearse una base de datos, sin servidor. Incluso puede crearse en la memoria del computador, dependiendo del tamaño del archivo esto puede resultar conveniente o no.


```python
import sqlite3
import pandas as pd
```

SQLite, no requiere servidor, pero si una base de datos en disco; del modo siguiente puede crearse una, a partir de un archivo separado por comas.


```python
ruta = './data/OnlineRetail.csv'
con = sqlite3.connect(os.path.join('./data/', 'OnlineRetail.db'))

cur = con.cursor()
```

El siguiente <i>bucle</i> importa fracciones del archivo y las agrega a una base de datos. De modo que en ningún momento, con este procedimiento se importa todo el archivo a la memoria del computador, solo trozos progresivamente.


```python
for fraccion in pd.read_csv(ruta, encoding = 'ISO-8859-1',
                        sep = ';',
                        decimal = ',',
                        chunksize = 500):
    fraccion.to_sql('onlineretail', con, if_exists = 'append')
```

Este archivo tiene alrededor de $500.000$ filas, no es grande realmente. El caso es que es leido por trozos de 500 filas y guardado en la base de datos creada arriba.


```python
cur.execute("""SELECT SUM(UnitPrice * Quantity) FROM onlineretail;
            """).fetchall() # EL mismo cálculo hecho arriba con generadores
```




    [(9747747.93400317,)]



El número de registros o transacciones por países.


```python
cur.execute("""SELECT Country, COUNT(*) as N
            from onlineretail
            GROUP BY Country
            ORDER BY N DESC;
            """).fetchall()
```




    [('United Kingdom', 495478),
     ('Germany', 9495),
     ('France', 8557),
     ('EIRE', 8196),
     ('Spain', 2533),
     ('Netherlands', 2371),
     ('Belgium', 2069),
     ('Switzerland', 2002),
     ('Portugal', 1519),
     ('Australia', 1259),
     ('Norway', 1086),
     ('Italy', 803),
     ('Channel Islands', 758),
     ('Finland', 695),
     ('Cyprus', 622),
     ('Sweden', 462),
     ('Unspecified', 446),
     ('Austria', 401),
     ('Denmark', 389),
     ('Japan', 358),
     ('Poland', 341),
     ('Israel', 297),
     ('USA', 291),
     ('Hong Kong', 288),
     ('Singapore', 229),
     ('Iceland', 182),
     ('Canada', 151),
     ('Greece', 146),
     ('Malta', 127),
     ('United Arab Emirates', 68),
     ('European Community', 61),
     ('RSA', 58),
     ('Lebanon', 45),
     ('Lithuania', 35),
     ('Brazil', 32),
     ('Czech Republic', 30),
     ('Bahrain', 19),
     ('Saudi Arabia', 10)]



El resultado de una <i>query</i> en <i>dataframe</i>.


```python
df = pd.read_sql("""SELECT Country, SUM(Quantity * UnitPrice) AS ingresos,
            SUM(Quantity) AS Cantidad, AVG(UnitPrice) AS precio
            FROM onlineretail
            GROUP BY Country;""", con)

```


```python
df.head()
```




<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Country</th>
      <th>ingresos</th>
      <th>Cantidad</th>
      <th>precio</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>Australia</td>
      <td>137077.27</td>
      <td>83653</td>
      <td>3.220612</td>
    </tr>
    <tr>
      <th>1</th>
      <td>Austria</td>
      <td>10154.32</td>
      <td>4827</td>
      <td>4.243192</td>
    </tr>
    <tr>
      <th>2</th>
      <td>Bahrain</td>
      <td>548.40</td>
      <td>260</td>
      <td>4.556316</td>
    </tr>
    <tr>
      <th>3</th>
      <td>Belgium</td>
      <td>40910.96</td>
      <td>23152</td>
      <td>3.644335</td>
    </tr>
    <tr>
      <th>4</th>
      <td>Brazil</td>
      <td>1143.60</td>
      <td>356</td>
      <td>4.456250</td>
    </tr>
  </tbody>
</table>
</div>




```python

```
